/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Beans.Caso;
import Beans.Ocorrencia;
import Beans.Resultado;
import Beans.Solucao;
import Beans.Tecnico;
import DAO.DAOOcorrencia;
import DAO.DAOTecnico;
import java.math.BigDecimal;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import jcolibri.cbrcore.CBRCase;

/**
 *
 * @author Wanderson
 */
public class JFEditarOcorrencia extends javax.swing.JFrame {

    /**
     * Creates new form JFEditarOcorrencia
     */
    public JFEditarOcorrencia() {
        initComponents();
        jsEstado.setValue("Aberta");
    }
    
    public JFEditarOcorrencia(Ocorrencia oco) {
        initComponents();
        ocorrencia = oco;
        initCbTecnico();
        preencheDados();
        estadoOcorrencia();
    }
    
    public JFEditarOcorrencia(Ocorrencia oco, JFListaOcorrencia jf) {
        initComponents();
        ocorrencia = oco;
        initCbTecnico();
        preencheDados();
        estadoOcorrencia();
        listarOcorrencia = jf;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpCliente = new javax.swing.JPanel();
        lbCodOcorrencia = new javax.swing.JLabel();
        lbCodigo = new javax.swing.JLabel();
        lbDataAbertura = new javax.swing.JLabel();
        lbInformacoes = new javax.swing.JLabel();
        spProblemaCliente = new javax.swing.JScrollPane();
        taProblemaCliente = new javax.swing.JTextArea();
        ftfDataAbertura = new javax.swing.JFormattedTextField();
        lbCliente = new javax.swing.JLabel();
        lbNomeCliente = new javax.swing.JLabel();
        lbPrioridade = new javax.swing.JLabel();
        cbPrioridade = new javax.swing.JComboBox();
        lbEquipamento = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taEquipamento = new javax.swing.JTextArea();
        jpCaso = new javax.swing.JPanel();
        lbCaso = new javax.swing.JLabel();
        lbCodigoCaso = new javax.swing.JLabel();
        btAdicionar = new javax.swing.JButton();
        lbDiagnostico = new javax.swing.JLabel();
        lbAcao = new javax.swing.JLabel();
        tfDiagnostico = new javax.swing.JTextField();
        tfAcao = new javax.swing.JTextField();
        btCaso = new javax.swing.JButton();
        jpTecnico = new javax.swing.JPanel();
        jsEstado = new javax.swing.JSpinner();
        lbEstado = new javax.swing.JLabel();
        lbDataFechamento = new javax.swing.JLabel();
        ftfDataFechamento = new javax.swing.JFormattedTextField();
        lbTempo = new javax.swing.JLabel();
        ftfTempo = new javax.swing.JFormattedTextField();
        lbValor = new javax.swing.JLabel();
        ftfValorConserto = new javax.swing.JFormattedTextField();
        lbTecnico = new javax.swing.JLabel();
        cbTecnico = new javax.swing.JComboBox();
        btNovo = new javax.swing.JButton();
        lbObs = new javax.swing.JLabel();
        spObs = new javax.swing.JScrollPane();
        taObs = new javax.swing.JTextArea();
        btHoje = new javax.swing.JButton();
        btApagar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();
        btSalvar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Atualização de Ocorrência");

        jpCliente.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbCodOcorrencia.setText("Código da Ocorrência:");

        lbCodigo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbCodigo.setText("####");

        lbDataAbertura.setText("Data de Abertura:");

        lbInformacoes.setText("Informações relatadas pelo cliente:");

        taProblemaCliente.setColumns(20);
        taProblemaCliente.setLineWrap(true);
        taProblemaCliente.setRows(5);
        taProblemaCliente.setToolTipText("Descrição sucinta do problema informado pelo cliente.");
        taProblemaCliente.setWrapStyleWord(true);
        spProblemaCliente.setViewportView(taProblemaCliente);

        try {
            ftfDataAbertura.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftfDataAbertura.setToolTipText("Data de abertura da ocorrência no fomato DD/MM/AAAA.");

        lbCliente.setText("Cliente:");

        lbNomeCliente.setText("######################");

        lbPrioridade.setText("Prioridade:");

        cbPrioridade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Baixa", "Normal", "Alta" }));
        cbPrioridade.setToolTipText("Escolha a prioridade de atendimento da ocorrência. Ocorrências com prioridade alta são listadas primeiro.");

        lbEquipamento.setText("Descrição do equipamento defeituoso:");

        taEquipamento.setColumns(20);
        taEquipamento.setRows(5);
        taEquipamento.setToolTipText("Descrição do equipamento do cliente, utilize informações como marca, modelo, tipo de hardware e outros dados relevantes.");
        taEquipamento.setWrapStyleWord(true);
        jScrollPane1.setViewportView(taEquipamento);

        javax.swing.GroupLayout jpClienteLayout = new javax.swing.GroupLayout(jpCliente);
        jpCliente.setLayout(jpClienteLayout);
        jpClienteLayout.setHorizontalGroup(
            jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spProblemaCliente)
                    .addGroup(jpClienteLayout.createSequentialGroup()
                        .addComponent(lbCliente)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbNomeCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpClienteLayout.createSequentialGroup()
                        .addComponent(lbCodOcorrencia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jpClienteLayout.createSequentialGroup()
                                .addComponent(lbPrioridade)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(cbPrioridade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jpClienteLayout.createSequentialGroup()
                                .addComponent(lbDataAbertura)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ftfDataAbertura, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jScrollPane1)
                    .addGroup(jpClienteLayout.createSequentialGroup()
                        .addGroup(jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbInformacoes)
                            .addComponent(lbEquipamento))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpClienteLayout.setVerticalGroup(
            jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpClienteLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCodOcorrencia)
                    .addComponent(lbCodigo)
                    .addComponent(lbDataAbertura)
                    .addComponent(ftfDataAbertura, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPrioridade)
                    .addComponent(cbPrioridade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpClienteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCliente)
                    .addComponent(lbNomeCliente))
                .addGap(12, 12, 12)
                .addComponent(lbInformacoes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spProblemaCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbEquipamento)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        jpCaso.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbCaso.setText("Código do Caso:");

        lbCodigoCaso.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        lbCodigoCaso.setText("####");

        btAdicionar.setText("Adicionar Caso");
        btAdicionar.setToolTipText("Executa o clico RBC para encortrar um caso semelhante e adaptar para o problema atual. Para fechar uma ocorrência é necessário adicionar um caso.");
        btAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAdicionarActionPerformed(evt);
            }
        });

        lbDiagnostico.setText("Diagnóstico");

        lbAcao.setText("Ação Corretiva");

        tfDiagnostico.setEditable(false);
        tfDiagnostico.setToolTipText("Campo não editável preenchido automaticamente ao inserir um caso à ocorrência.");

        tfAcao.setEditable(false);
        tfAcao.setToolTipText("Campo não editável preenchido automaticamente ao inserir um caso à ocorrência.");

        btCaso.setText("Remover Caso");
        btCaso.setToolTipText("Remove o caso da ocorrência. Se removido e gravado, será necessário executar o ciclo RBC novamente para adicionar um novo caso.");
        btCaso.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCasoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpCasoLayout = new javax.swing.GroupLayout(jpCaso);
        jpCaso.setLayout(jpCasoLayout);
        jpCasoLayout.setHorizontalGroup(
            jpCasoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCasoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCasoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpCasoLayout.createSequentialGroup()
                        .addGroup(jpCasoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDiagnostico)
                            .addComponent(lbAcao))
                        .addGap(0, 817, Short.MAX_VALUE))
                    .addComponent(tfDiagnostico)
                    .addComponent(tfAcao)
                    .addGroup(jpCasoLayout.createSequentialGroup()
                        .addComponent(lbCaso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbCodigoCaso, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 492, Short.MAX_VALUE)
                        .addComponent(btCaso)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btAdicionar)))
                .addContainerGap())
        );
        jpCasoLayout.setVerticalGroup(
            jpCasoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpCasoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpCasoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbCaso)
                    .addComponent(lbCodigoCaso)
                    .addComponent(btAdicionar)
                    .addComponent(btCaso))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbDiagnostico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDiagnostico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbAcao)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfAcao)
                .addContainerGap())
        );

        jpTecnico.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jsEstado.setModel(new javax.swing.SpinnerListModel(new String[] {"Fechada", "Aberta"}));
        jsEstado.setToolTipText("Estado da ocorrência, ocorrências abertas serão listadas na tabela de ocorrências em aberto na tela principal do sistema.");
        jsEstado.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jsEstadoStateChanged(evt);
            }
        });

        lbEstado.setText("Estado:");

        lbDataFechamento.setText("Data de Fechamento:");

        try {
            ftfDataFechamento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        ftfDataFechamento.setToolTipText("Data de fechamento da ocorrência no fomato DD/MM/AAAA. Somente ocorrências com o estado \"Fechada\" possibilita a edição deste campo.");

        lbTempo.setText("Tempo de Conserto:");

        ftfTempo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getTimeInstance(java.text.DateFormat.SHORT))));
        ftfTempo.setToolTipText("Tempo gasto para o conserto do problema. Este campo utiliza o formato HH:MM.");

        lbValor.setText("Valor do Conserto: R$");

        ftfValorConserto.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.00"))));
        ftfValorConserto.setToolTipText("Valor do conserto informado somente por números.");

        lbTecnico.setText("Técnico Responsável:");

        cbTecnico.setToolTipText("Selecione o técnico resposável pela manutenção da ocorrência.");

        btNovo.setText("Novo");
        btNovo.setToolTipText("Abre o cadastro para novos técnicos.");
        btNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btNovoActionPerformed(evt);
            }
        });

        lbObs.setText("Observações:");

        taObs.setColumns(20);
        taObs.setLineWrap(true);
        taObs.setRows(5);
        taObs.setToolTipText("Campo destinado a observações gerais durante o atendimento. Use informações úteis, como por exemplo, peças novas instaladas, problemas adicionais, entre outras.");
        taObs.setWrapStyleWord(true);
        spObs.setViewportView(taObs);

        btHoje.setText("Hoje");
        btHoje.setToolTipText("Preenche a data atual no campo Data de Fechamento.");
        btHoje.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btHojeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpTecnicoLayout = new javax.swing.GroupLayout(jpTecnico);
        jpTecnico.setLayout(jpTecnicoLayout);
        jpTecnicoLayout.setHorizontalGroup(
            jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTecnicoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spObs)
                    .addGroup(jpTecnicoLayout.createSequentialGroup()
                        .addGroup(jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jpTecnicoLayout.createSequentialGroup()
                                .addComponent(lbTecnico)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbTecnico, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jpTecnicoLayout.createSequentialGroup()
                                .addComponent(lbTempo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ftfTempo, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 52, Short.MAX_VALUE)
                                .addComponent(lbValor))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jpTecnicoLayout.createSequentialGroup()
                                .addComponent(lbEstado)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jsEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lbDataFechamento)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ftfDataFechamento, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ftfValorConserto)
                            .addComponent(btNovo, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .addComponent(btHoje, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jpTecnicoLayout.createSequentialGroup()
                        .addComponent(lbObs)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jpTecnicoLayout.setVerticalGroup(
            jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpTecnicoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbEstado)
                    .addComponent(jsEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbDataFechamento)
                    .addComponent(ftfDataFechamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btHoje))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTecnico)
                    .addComponent(cbTecnico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btNovo))
                .addGap(18, 18, 18)
                .addGroup(jpTecnicoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbTempo)
                    .addComponent(ftfTempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbValor)
                    .addComponent(ftfValorConserto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(lbObs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spObs, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                .addGap(13, 13, 13))
        );

        btApagar.setText("Apagar");
        btApagar.setToolTipText("Apaga a ocorrência, somente utilize se realmente for necessário.");

        btCancelar.setText("Fechar");
        btCancelar.setToolTipText("Fecha a janela atual.");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        btSalvar.setText("Salvar");
        btSalvar.setToolTipText("Salva a ocorrência no banco de dados.");
        btSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSalvarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpCaso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpTecnico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btApagar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpTecnico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpCaso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btApagar)
                    .addComponent(btCancelar)
                    .addComponent(btSalvar))
                .addGap(18, 18, 18))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btCancelarActionPerformed

    private void btAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAdicionarActionPerformed
        // TODO add your handling code here:
        if(ocorrencia.getCaso() != null) {
            JOptionPane.showMessageDialog(null, "Não é possível adicionar mais de um caso a ocorrência! É preciso removê-la primeiro.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        cadCaso = new JFCadCaso(this);
        cadCaso.setLocationRelativeTo(this);
        cadCaso.setVisible(true);
    }//GEN-LAST:event_btAdicionarActionPerformed

    private void btNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btNovoActionPerformed
        // TODO add your handling code here:
        cadTecnico = new JFCadTecnico(this);
        cadTecnico.setLocationRelativeTo(this);
        cadTecnico.setVisible(true);
    }//GEN-LAST:event_btNovoActionPerformed

    private void btSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSalvarActionPerformed
        // TODO add your handling code here:
        atualizarOcorrencia();
    }//GEN-LAST:event_btSalvarActionPerformed

    private void btHojeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btHojeActionPerformed
        // TODO add your handling code here:
        Date hoje = new Date();
        SimpleDateFormat df;
        df = new SimpleDateFormat("dd/MM/yyyy");
        ftfDataFechamento.setText("" + df.format(hoje));
    }//GEN-LAST:event_btHojeActionPerformed

    private void jsEstadoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jsEstadoStateChanged
        // TODO add your handling code here:
        if (jsEstado.getValue() == "Aberta") {
            ftfDataFechamento.setText("");
            ftfDataFechamento.setEditable(false);
            btHoje.setEnabled(false);
        } else {
            ftfDataFechamento.setEditable(true);
            btHoje.setEnabled(true);
        }
    }//GEN-LAST:event_jsEstadoStateChanged

    private void btCasoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCasoActionPerformed
        // TODO add your handling code here:
        tfAcao.setText("");
        tfDiagnostico.setText("");
        lbCodigoCaso.setText("####");
        ocorrencia.setCaso(null);
    }//GEN-LAST:event_btCasoActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAdicionar;
    private javax.swing.JButton btApagar;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btCaso;
    private javax.swing.JButton btHoje;
    private javax.swing.JButton btNovo;
    private javax.swing.JButton btSalvar;
    private javax.swing.JComboBox cbPrioridade;
    private javax.swing.JComboBox cbTecnico;
    private javax.swing.JFormattedTextField ftfDataAbertura;
    private javax.swing.JFormattedTextField ftfDataFechamento;
    private javax.swing.JFormattedTextField ftfTempo;
    private javax.swing.JFormattedTextField ftfValorConserto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jpCaso;
    private javax.swing.JPanel jpCliente;
    private javax.swing.JPanel jpTecnico;
    private javax.swing.JSpinner jsEstado;
    private javax.swing.JLabel lbAcao;
    private javax.swing.JLabel lbCaso;
    private javax.swing.JLabel lbCliente;
    private javax.swing.JLabel lbCodOcorrencia;
    private javax.swing.JLabel lbCodigo;
    private javax.swing.JLabel lbCodigoCaso;
    private javax.swing.JLabel lbDataAbertura;
    private javax.swing.JLabel lbDataFechamento;
    private javax.swing.JLabel lbDiagnostico;
    private javax.swing.JLabel lbEquipamento;
    private javax.swing.JLabel lbEstado;
    private javax.swing.JLabel lbInformacoes;
    private javax.swing.JLabel lbNomeCliente;
    private javax.swing.JLabel lbObs;
    private javax.swing.JLabel lbPrioridade;
    private javax.swing.JLabel lbTecnico;
    private javax.swing.JLabel lbTempo;
    private javax.swing.JLabel lbValor;
    private javax.swing.JScrollPane spObs;
    private javax.swing.JScrollPane spProblemaCliente;
    private javax.swing.JTextArea taEquipamento;
    private javax.swing.JTextArea taObs;
    private javax.swing.JTextArea taProblemaCliente;
    private javax.swing.JTextField tfAcao;
    private javax.swing.JTextField tfDiagnostico;
    // End of variables declaration//GEN-END:variables
    private JFCadCaso cadCaso;
    private JFCadTecnico cadTecnico;
    private Ocorrencia ocorrencia;
    private JFListaOcorrencia listarOcorrencia;
    
    private void preencheDados() {
        
        SimpleDateFormat df;
        df = new SimpleDateFormat("dd/MM/yyyy");
        
        lbCodigo.setText("" + ocorrencia.getIdOcorrencia());
        taProblemaCliente.setText(ocorrencia.getProbOcorrencia());
        cbPrioridade.setSelectedIndex(ocorrencia.getPriOcorrencia());
        ftfDataAbertura.setText("" + df.format(ocorrencia.getDtAbertura()));
        lbNomeCliente.setText(ocorrencia.getCliente().getNmCliente());
        taObs.setText(ocorrencia.getObsOcorrencia());
        taEquipamento.setText(ocorrencia.getDesEquipamento());
        
        if (ocorrencia.getValorConserto() != null) ftfValorConserto.setText("" + ocorrencia.getValorConserto());
        if (ocorrencia.getDtFechamento() != null) ftfDataFechamento.setText("" + df.format(ocorrencia.getDtFechamento()));
        if (ocorrencia.getTmpConserto() != null) ftfTempo.setText("" + ocorrencia.getTmpConserto());
        
        if (ocorrencia.getCaso() != null) {
            lbCodigoCaso.setText(ocorrencia.getCaso().getIdCaso() + "");
            tfAcao.setText(ocorrencia.getCaso().getSolucao().getDesSolucao());
            tfDiagnostico.setText(ocorrencia.getCaso().getResultado().getDesResultado());
        }
        
        cbTecnico.setSelectedItem(ocorrencia.getTecnico());
            
    }
    
    private void initCbTecnico() {
        
        DAOTecnico daoTecnico = new DAOTecnico();
        List listaTecnicos;
        Tecnico tecnico;
        
        try {
            listaTecnicos = daoTecnico.listar("");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Problema na busca de técnicos, detalhes:\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for (int i=0; i<listaTecnicos.size(); i++) {
            tecnico = (Tecnico)listaTecnicos.get(i);
            cbTecnico.addItem(tecnico);
        }
        
        cbTecnico.setSelectedIndex(-1);
        
    }
    
    public void adicionarTecnico (Tecnico tec) {
        
        cbTecnico.addItem(tec);
        cbTecnico.setSelectedItem(tec);
        
    }
    
    private void estadoOcorrencia() {
        
        if (ocorrencia.getEstOcorrencia() == 0) {
            jsEstado.setValue("Aberta");
        } else {
            jsEstado.setValue("Fechada");
        }
        
    }
    
    private void atualizarOcorrencia() {
        
        Date data;
        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");
        
        try {
            data = new java.sql.Date(df.parse(ftfDataAbertura.getText()).getTime());
            ocorrencia.setDtAbertura(data);
        } catch (ParseException ex) {
            //JOptionPane.showMessageDialog(null, "Data de abertura informada é inválida, detalhes:\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        ocorrencia.setProbOcorrencia(taProblemaCliente.getText());
        ocorrencia.setPriOcorrencia(cbPrioridade.getSelectedIndex());
        ocorrencia.setObsOcorrencia(taObs.getText());
        ocorrencia.setDesEquipamento(taEquipamento.getText());
        
        try {
            data = new java.sql.Date(df.parse(ftfDataFechamento.getText()).getTime());
            ocorrencia.setDtFechamento(data);
        } catch (ParseException ex) {
            if (jsEstado.getValue().equals("Fechada")) {
                JOptionPane.showMessageDialog(null, "Para fechar a ocorrência é preciso informar uma data de fechamento válida, detalhes:\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        df = new SimpleDateFormat("HH:mm");
        try {
            data = new java.sql.Time(df.parse(ftfTempo.getText()).getTime());
            ocorrencia.setTmpConserto(data);
        } catch (ParseException ex) {
            if (jsEstado.getValue().equals("Fechada")) {
                JOptionPane.showMessageDialog(null, "Para fechar a ocorrência é preciso informar um tempo de conserto válido, detalhes:\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        
        String valor = ftfValorConserto.getText();
        
        if(valor.equals("") && jsEstado.getValue().equals("Fechada")) {
            JOptionPane.showMessageDialog(null, "Para fechar a ocorrência é preciso informar o valor do conserto!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (valor.equals("")) {
            ocorrencia.setValorConserto(null);
        } else {
            valor = valor.replace(",", ".");
            ocorrencia.setValorConserto(new BigDecimal(valor));
        }
        
        ocorrencia.setTecnico((Tecnico)cbTecnico.getSelectedItem());
        
        if (ocorrencia.getTecnico() == null && jsEstado.getValue().equals("Fechada")) {
            JOptionPane.showMessageDialog(null, "Para fechar a ocorrência é preciso selecionar um técnico!", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (jsEstado.getValue().equals("Fechada")) {
            ocorrencia.setEstOcorrencia(1);
        } else {
            ocorrencia.setEstOcorrencia(0);
            ocorrencia.setDtFechamento(null);
        }
        
        DAOOcorrencia daoOcorrencia = new DAOOcorrencia();
        try {
            daoOcorrencia.alterar(ocorrencia);
            JOptionPane.showMessageDialog(null, "Ocorrência salva!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Houve algum problema com a alteração da ocorrência, detalhes:\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
        if (listarOcorrencia != null) {
            listarOcorrencia.listarOcorrencias();
            this.dispose();
        }
        
    }
    
    public void setCaso(CBRCase _caso) {
        
        Resultado res = (Resultado)_caso.getResult();
        Solucao sol = (Solucao)_caso.getSolution();
        Caso caso = (Caso) _caso.getDescription();
        
        lbCodigoCaso.setText(caso.getIdCaso() + "");
        tfAcao.setText(sol.getDesSolucao());
        tfDiagnostico.setText(res.getDesResultado());
        
        ocorrencia.setCaso(caso);
        
    }
    
}
