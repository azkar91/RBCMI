/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Beans.Cliente;
import DAO.DAOCliente;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Wanderson
 */
public class JFListaCliente extends javax.swing.JFrame {

    /**
     * Creates new form JFListaCliente
     */
    public JFListaCliente() {
        initComponents();
        initCliente();
        btSelecionar.setVisible(false);
        btCancelar.setText("Fechar");
    }
    
    public JFListaCliente(JFCadOcorrencia cadOco) {
        initComponents();
        initCliente();
        this.cadOco = cadOco;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spCliente = new javax.swing.JScrollPane();
        jtCliente = new javax.swing.JTable();
        btSelecionar = new javax.swing.JButton();
        btCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Consulta de Clientes");

        jtCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "CPF/CNPJ", "Endereço", "Telefone", "E-mail"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtCliente.setToolTipText("Tabela com dados dos clientes, é possível editar as informações diretamente na tabela.");
        spCliente.setViewportView(jtCliente);

        btSelecionar.setText("Selecionar");
        btSelecionar.setToolTipText("Usa o cliente selecionada na tabela para o cadastro da ocorrência.");
        btSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSelecionarActionPerformed(evt);
            }
        });

        btCancelar.setText("Fechar");
        btCancelar.setToolTipText("Fecha a janela atual.");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btSelecionar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btCancelar)
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spCliente, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btSelecionar)
                    .addComponent(btCancelar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSelecionarActionPerformed
        // TODO add your handling code here:
        insereClienteOcorrencia();
    }//GEN-LAST:event_btSelecionarActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btSelecionar;
    private javax.swing.JTable jtCliente;
    private javax.swing.JScrollPane spCliente;
    // End of variables declaration//GEN-END:variables
    JFCadOcorrencia cadOco;
    
    private void initCliente() {
        
        ((DefaultTableCellRenderer)jtCliente.getTableHeader().getDefaultRenderer()).setHorizontalAlignment(SwingConstants.CENTER);
        jtCliente.getColumnModel().getColumn(0).setPreferredWidth(10);
        jtCliente.getColumnModel().getColumn(1).setPreferredWidth(150);
        jtCliente.getColumnModel().getColumn(3).setPreferredWidth(150);
        jtCliente.getColumnModel().getColumn(5).setPreferredWidth(100);
        
        listarCliente();
                
        if (cadOco == null) {
            jtCliente.getModel().addTableModelListener(new TableModelListener(){
                @Override
                public void tableChanged(TableModelEvent e) {
            
                    int row = e.getFirstRow();
                    Cliente cliente = new Cliente();
                    DAOCliente daoCliente = new DAOCliente();
                    DefaultTableModel dtm = (DefaultTableModel) e.getSource();
           
                    cliente.setIdCliente((Integer)dtm.getValueAt(row, 0));
                    cliente.setNmCliente((String)dtm.getValueAt(row, 1));
                    cliente.setCpfCliente((String)dtm.getValueAt(row, 2));
                    cliente.setEndCliente((String)dtm.getValueAt(row, 3));
                    cliente.setTelCliente((String)dtm.getValueAt(row, 4));
                    cliente.setEmailCliente((String)dtm.getValueAt(row, 5));
            
                    try {
                        daoCliente.alterar(cliente);
                        System.out.println("Cliente armazenado com sucesso!");
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Houve algum problema na atualização do cliente, detalhes:\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
                    }
            
                }
            });
        }

        
    }
    
    private void listarCliente() {
        
        DefaultTableModel dtm = (DefaultTableModel)jtCliente.getModel();
        DAOCliente daoCliente = new DAOCliente();
        Cliente cliente;
        List listaCliente;
        
        try {
            listaCliente = daoCliente.listar("");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Houve algum problema com a listagem dos clientes, detalhes:\n" + ex, "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
         
        for(int i=0; i<listaCliente.size(); i++) { //insere resultado nas tabelas
            
           cliente = (Cliente)listaCliente.get(i);
           dtm.addRow(new Object[]{cliente.getIdCliente(), cliente.getNmCliente(), cliente.getCpfCliente(), cliente.getEndCliente(), cliente.getTelCliente(), cliente.getEmailCliente()});     
            
       }
        
    }
    
    private void insereClienteOcorrencia() {
        
        DefaultTableModel dtm = (DefaultTableModel)jtCliente.getModel();
        int[] l = jtCliente.getSelectedRows();
        
        if(l.length == 1) {
            int idCliente = (Integer)dtm.getValueAt(l[0], 0);
            cadOco.insereIdCliente(idCliente);
         //   JOptionPane.showMessageDialog(null, "Cliente selecionado à occorência com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Selecione somente um cliente!", "Erro", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
}
