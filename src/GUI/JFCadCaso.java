/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Beans.Resultado;
import Beans.Solucao;
import Extras.EachRowEditor;
import Rbcmi.ConfigCiclo;
import Rbcmi.RbcMi;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import jcolibri.cbrcore.CBRCase;

/**
 *
 * @author Wanderson
 */
public class JFCadCaso extends javax.swing.JFrame {

    /**
     * Creates new form JFCadCaso
     */
    public JFCadCaso(JFEditarOcorrencia JFEOco) {
        initComponents();
        initCadCaso();
        initTabelaAtributo();
        initTabelaSom();
        initTabelaVideo();
        initTabelaRede();
        initTabelaImpressao();
        initTabelaTrava();
        initTabelaInicialiazao();
        initTabelaNaoliga();
        JFOco = JFEOco;
        RbcMi rbcmi = RbcMi.getInstance();
        rbcmi.setFrameCadCaso(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSelecao = new javax.swing.ButtonGroup();
        jpProblema = new javax.swing.JPanel();
        lbAtributo = new javax.swing.JLabel();
        cbCategoria = new javax.swing.JComboBox();
        rbLivre = new javax.swing.JRadioButton();
        rbCategoria = new javax.swing.JRadioButton();
        lbInfo = new javax.swing.JLabel();
        spTabela = new javax.swing.JScrollPane();
        jtAtributo = new javax.swing.JTable();
        btCancelar = new javax.swing.JButton();
        jpDiagnostico = new javax.swing.JPanel();
        lbDiagnostico = new javax.swing.JLabel();
        tfDiagnostico = new javax.swing.JTextField();
        lbCorretiva = new javax.swing.JLabel();
        tfCorretiva = new javax.swing.JTextField();
        jpKsimi = new javax.swing.JPanel();
        btVerificar = new javax.swing.JButton();
        jsK = new javax.swing.JSpinner();
        lbCasosBusca = new javax.swing.JLabel();
        lbBaseCasos = new javax.swing.JLabel();
        btLimpar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cadastro de Caso");

        jpProblema.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbAtributo.setText("Escolha abaixo a opção desejada:");

        cbCategoria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Imagem e Monitor", "Impressão", "Inicialização", "Lentidão e travamentos", "Não liga", "Rede e Internet", "Som" }));
        cbCategoria.setEnabled(false);
        cbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbCategoriaActionPerformed(evt);
            }
        });

        bgSelecao.add(rbLivre);
        rbLivre.setSelected(true);
        rbLivre.setText("Seleção livre de Atributos");
        rbLivre.setToolTipText("Escolhe entre todos os atributos disponíveis (pode ser menos preciso do que uma categoria específica).");
        rbLivre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLivreActionPerformed(evt);
            }
        });

        bgSelecao.add(rbCategoria);
        rbCategoria.setText("Categoria de Problema");
        rbCategoria.setToolTipText("Use essa opção para cadastrar um caso de acordo com sua categoria (mais preciso).");
        rbCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbCategoriaActionPerformed(evt);
            }
        });

        lbInfo.setFont(new java.awt.Font("Noto Sans", 2, 12)); // NOI18N
        lbInfo.setText("Na seleção livre só serão considerados os atributos que possuírem peso.");

        javax.swing.GroupLayout jpProblemaLayout = new javax.swing.GroupLayout(jpProblema);
        jpProblema.setLayout(jpProblemaLayout);
        jpProblemaLayout.setHorizontalGroup(
            jpProblemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpProblemaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpProblemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbCategoria)
                    .addComponent(rbLivre)
                    .addComponent(lbAtributo))
                .addGap(2, 2, 2)
                .addGroup(jpProblemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpProblemaLayout.createSequentialGroup()
                        .addComponent(lbInfo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(cbCategoria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpProblemaLayout.setVerticalGroup(
            jpProblemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpProblemaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbAtributo)
                .addGap(18, 18, 18)
                .addGroup(jpProblemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbCategoria)
                    .addComponent(cbCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpProblemaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbLivre, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbInfo))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spTabela.setViewportView(jtAtributo);

        btCancelar.setText("Fechar");
        btCancelar.setToolTipText("Fecha a janela atual.");
        btCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCancelarActionPerformed(evt);
            }
        });

        jpDiagnostico.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        lbDiagnostico.setText("Diagnóstico");

        tfDiagnostico.setEditable(false);
        tfDiagnostico.setToolTipText("Campo não editável preenchido automaticamente depois de executar o ciclo RBC.");

        lbCorretiva.setText("Ação Corretiva Recomendada");

        tfCorretiva.setEditable(false);
        tfCorretiva.setToolTipText("Campo não editável preenchido automaticamente depois de executar o ciclo RBC.");

        javax.swing.GroupLayout jpDiagnosticoLayout = new javax.swing.GroupLayout(jpDiagnostico);
        jpDiagnostico.setLayout(jpDiagnosticoLayout);
        jpDiagnosticoLayout.setHorizontalGroup(
            jpDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDiagnosticoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfDiagnostico)
                    .addGroup(jpDiagnosticoLayout.createSequentialGroup()
                        .addGroup(jpDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbDiagnostico)
                            .addComponent(lbCorretiva))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(tfCorretiva))
                .addContainerGap())
        );
        jpDiagnosticoLayout.setVerticalGroup(
            jpDiagnosticoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpDiagnosticoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbDiagnostico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDiagnostico)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbCorretiva)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfCorretiva)
                .addContainerGap())
        );

        jpKsimi.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btVerificar.setText("Verificar Casos Similares");
        btVerificar.setToolTipText("Verifica os casos similares de acordo com os atributos específicados.");
        btVerificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVerificarActionPerformed(evt);
            }
        });

        jsK.setModel(new javax.swing.SpinnerNumberModel(3, 1, 10, 1));
        jsK.setToolTipText("Quantidade de casos similares a serem buscados na base de dados.");

        lbCasosBusca.setText("Quantidade");

        lbBaseCasos.setText("Casos a serem buscado na Base:");

        javax.swing.GroupLayout jpKsimiLayout = new javax.swing.GroupLayout(jpKsimi);
        jpKsimi.setLayout(jpKsimiLayout);
        jpKsimiLayout.setHorizontalGroup(
            jpKsimiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpKsimiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpKsimiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jpKsimiLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(lbCasosBusca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jsK, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbBaseCasos)
                    .addComponent(btVerificar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jpKsimiLayout.setVerticalGroup(
            jpKsimiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpKsimiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbBaseCasos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpKsimiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jsK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbCasosBusca))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btVerificar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btLimpar.setText("Limpar Tudo");
        btLimpar.setToolTipText("Limpa todos os dados da janela.");
        btLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spTabela)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jpProblema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jpKsimi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jpDiagnostico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btLimpar, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btCancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jpProblema, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpKsimi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(spTabela, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpDiagnostico, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btCancelar)
                    .addComponent(btLimpar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbCategoriaActionPerformed
        
        String categoria = (String)cbCategoria.getSelectedItem();
    
        if(categoria.equals("Som")) {
            spTabela.setViewportView(jtSom);               
        } else {
            if (categoria.equals("Imagem e Monitor")) {
                spTabela.setViewportView(jtVideo);
            } else {
                if (categoria.equals("Rede e Internet")) {
                    spTabela.setViewportView(jtRede);
                } else {
                    if (categoria.equals("Impressão")) {
                        spTabela.setViewportView(jtImpressao);
                    } else {
                        if (categoria.equals("Lentidão e travamentos")) {
                            spTabela.setViewportView(jtTrava);
                        } else {
                            if (categoria.equals("Inicialização")) {
                                spTabela.setViewportView(jtinicializacao);
                            } else {
                                spTabela.setViewportView(jtNaoliga);
                            }
                        }
                    }
                }
            }
        }
              
    }//GEN-LAST:event_cbCategoriaActionPerformed

    private void rbLivreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLivreActionPerformed
        // TODO add your handling code here:
        selecaoAtri();
    }//GEN-LAST:event_rbLivreActionPerformed

    private void rbCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbCategoriaActionPerformed
        // TODO add your handling code here:
        selecaoAtri();
    }//GEN-LAST:event_rbCategoriaActionPerformed

    private void btVerificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVerificarActionPerformed
        // TODO add your handling code here:
        cicloRBC();
    }//GEN-LAST:event_btVerificarActionPerformed

    private void btLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLimparActionPerformed
        // TODO add your handling code here:
        initTabelaAtributo();
        initTabelaSom();
        initTabelaVideo();
        initTabelaRede();
        initTabelaImpressao();
        initTabelaTrava();
        initTabelaInicialiazao();
        initTabelaNaoliga();
        cbCategoria.setEnabled(false);
        rbCategoria.setSelected(false);
        rbLivre.setSelected(true);
    }//GEN-LAST:event_btLimparActionPerformed

    private void btCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btCancelarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgSelecao;
    private javax.swing.JButton btCancelar;
    private javax.swing.JButton btLimpar;
    private javax.swing.JButton btVerificar;
    private javax.swing.JComboBox cbCategoria;
    private javax.swing.JPanel jpDiagnostico;
    private javax.swing.JPanel jpKsimi;
    private javax.swing.JPanel jpProblema;
    private javax.swing.JSpinner jsK;
    private javax.swing.JTable jtAtributo;
    private javax.swing.JLabel lbAtributo;
    private javax.swing.JLabel lbBaseCasos;
    private javax.swing.JLabel lbCasosBusca;
    private javax.swing.JLabel lbCorretiva;
    private javax.swing.JLabel lbDiagnostico;
    private javax.swing.JLabel lbInfo;
    private javax.swing.JRadioButton rbCategoria;
    private javax.swing.JRadioButton rbLivre;
    private javax.swing.JScrollPane spTabela;
    private javax.swing.JTextField tfCorretiva;
    private javax.swing.JTextField tfDiagnostico;
    // End of variables declaration//GEN-END:variables
    private JTable jtSom;
    private JTable jtVideo;
    private JTable jtImpressao;
    private JTable jtinicializacao;
    private JTable jtTrava;
    private JTable jtNaoliga;
    private JTable jtRede;
    private JComboBox endDns;
    private JComboBox endIp;
    private JComboBox estConexaorede;
    private JComboBox estDriverrede;
    private JComboBox estRjConector;
    private JComboBox tipoConexaorede;
    private JComboBox tipoConexaointernet;
    private JComboBox infraRede;
    private JComboBox estSoimpressora;
    private JComboBox estDriverimpressora;
    private JComboBox estLedimpressora;
    private JComboBox estGeralimpressora;
    private JComboBox tipoSoimpressora;
    private JComboBox tipoConexaoimpressora;
    private JComboBox nivelCartuchoimpressora;
    private JComboBox filaImpressao;
    private JComboBox qtdDispositivoaudio;
    private JComboBox estDriversom;
    private JComboBox estDispositivoaudio;
    private JComboBox sitSomnaofunciona;
    private JComboBox soArquitetura;
    private JComboBox hwNovoinstalado;
    private JComboBox msgErro;
    private JComboBox estLedhd;
    private JComboBox gabSujeira;
    private JComboBox soInstalado;
    private JComboBox estAntivirus;
    private JComboBox estSistemaoperacional;
    private JComboBox bipBios;
    private JComboBox dataSistema;
    private JComboBox hdBios;
    private JComboBox gabLedfuncionamento;
    private JComboBox estMonitor;
    private JComboBox gabBotaopower;
    private JComboBox gabCabeamentointerno;
    private JComboBox condCabeamentoenergia;
    private JComboBox psuVoltagem;
    private JComboBox equipProtecaoenergia;
    private JComboBox monRiscoscores;
    private JComboBox tipoVga;
    private JComboBox estDrivervideo;
    private JComboBox pcReinicia;
    private JComboBox pesos;
    private JComboBox pesosOb;
    private JFEditarOcorrencia JFOco;
    
    private void initCadCaso() {
        
        endDns = new JComboBox();
        endIp = new JComboBox();
        estConexaorede = new JComboBox();
        estDriverrede = new JComboBox();
        estRjConector = new JComboBox();
        tipoConexaorede = new JComboBox();
        tipoConexaointernet = new JComboBox();
        infraRede = new JComboBox();
        estSoimpressora = new JComboBox();
        estDriverimpressora = new JComboBox();
        estLedimpressora = new JComboBox();
        estGeralimpressora = new JComboBox();
        tipoSoimpressora = new JComboBox();
        tipoConexaoimpressora = new JComboBox();
        nivelCartuchoimpressora = new JComboBox();
        filaImpressao = new JComboBox();
        qtdDispositivoaudio = new JComboBox();
        estDriversom = new JComboBox();
        estDispositivoaudio = new JComboBox();
        sitSomnaofunciona = new JComboBox();
        soArquitetura = new JComboBox();
        hwNovoinstalado = new JComboBox();
        msgErro = new JComboBox();
        estLedhd = new JComboBox();
        gabSujeira = new JComboBox();
        soInstalado = new JComboBox();
        estAntivirus = new JComboBox();
        estSistemaoperacional = new JComboBox();
        bipBios = new JComboBox();
        dataSistema = new JComboBox();
        hdBios = new JComboBox();
        gabLedfuncionamento = new JComboBox();
        estMonitor = new JComboBox();
        gabBotaopower = new JComboBox();
        gabCabeamentointerno = new JComboBox();
        condCabeamentoenergia = new JComboBox();
        psuVoltagem = new JComboBox();
        equipProtecaoenergia = new JComboBox();
        monRiscoscores = new JComboBox();
        tipoVga = new JComboBox();
        estDrivervideo = new JComboBox();
        pcReinicia = new JComboBox();
        pesosOb = new JComboBox();
        pesos = new JComboBox();
        
        String[] driver = { "Instalado", "Desinstalado", "Desativado", "Não funcionando corretamente" };
        String[] led = { "Aceso", "Piscando", "Apagado" };
        String[] endRede = { "Automático", "Manual", "Em branco" };
        
        endDns.setModel(new DefaultComboBoxModel(endRede));
        endIp.setModel(new DefaultComboBoxModel(endRede));
        estConexaorede.setModel(new DefaultComboBoxModel(new String[] { "Ativada", "Desativada", "Limitada", "Desconectada", "Inexistente" }));
        estDriverrede.setModel(new DefaultComboBoxModel(driver));
        estRjConector.setModel(new DefaultComboBoxModel(new String[] { "Bom", "Oxidado", "Frouxo", "Não possui" }));
        tipoConexaorede.setModel(new DefaultComboBoxModel(new String[] { "Cabeada", "Wireless" }));
        tipoConexaointernet.setModel(new DefaultComboBoxModel(new String[] { "Adsl", "Rádio", "Fibra ótica", "Cabo", "Outro", "Nenhuma" }));
        infraRede.setModel(new DefaultComboBoxModel(new String[] { "Conectado a rede doméstica/corporativa", "Conectado direto ao gateway (modem)" }));
        estSoimpressora.setModel(new DefaultComboBoxModel(new String[] { "Pronta", "Offline", "Inexistente" }));
        estDriverimpressora.setModel(new DefaultComboBoxModel(driver));
        estLedimpressora.setModel(new DefaultComboBoxModel(led));
        estGeralimpressora.setModel(new DefaultComboBoxModel(new String[] { "Normal", "Apresenta vazamento", "Qualidade ruim de impressão", "Emite ruídos anormais" }));
        tipoSoimpressora.setModel(new DefaultComboBoxModel(new String[] { "Normal", "Padrão"}));
        tipoConexaoimpressora.setModel(new DefaultComboBoxModel(new String[] { "USB", "Rede", "Paralela/Serial" }));
        nivelCartuchoimpressora.setModel(new DefaultComboBoxModel(new String[] { "Cheio", "Alto", "Médio", "Baixo" }));
        filaImpressao.setModel(new DefaultComboBoxModel(new String[] { "Vazia", "Documentos pausados", "Documentos cancelados" }));
        qtdDispositivoaudio.setModel(new DefaultComboBoxModel(new String[] { "Somente um", "Dois ou mais" }));
        estDriversom.setModel(new DefaultComboBoxModel(driver));
        estDispositivoaudio.setModel(new DefaultComboBoxModel(new String[] { "Normal", "Emitindo ruídos", "Desligando sozinho" }));
        sitSomnaofunciona.setModel(new DefaultComboBoxModel(new String[] { "Reprodução de músicas e vídeos", "Em programas específicos", "Em qualquer situação" }));
        soArquitetura.setModel(new DefaultComboBoxModel(new String[] { "32", "64" }));
        hwNovoinstalado.setModel(new DefaultComboBoxModel(new String[] { "Sim", "Não" }));
        msgErro.setModel(new DefaultComboBoxModel(new String[] { "Nenhuma", "CMOS checksum error - defaults loaded", 
                                                                 "DISK BOOT FAILURE, INSERT SYSTEM DISK AND PRESS ENTER", "Boot.ini inválido. O Windows não pode iniciar porque o seguinte arquivo está faltando ou corrompido",
                                                                 "Tela azul + PAGE_FAULT_IN_NONPAGED_AREA", "Tela azul + STOP: c000021a (Erro fatal do sistema)", "Tela azul + IRQL NOT LESS OR EQUAL", "Tela azul + Outro erro",
                                                                 "BOOT + Outro erro"}));
        estLedhd.setModel(new DefaultComboBoxModel(led));
        gabSujeira.setModel(new DefaultComboBoxModel(new String[] { "Muita", "Moderada", "Pouca", "Nenhuma" }));
        soInstalado.setModel(new DefaultComboBoxModel(new String[] { "Windows 10", "Windows 8/8.1", "Windows 7", "Windows Vista", "Windows XP/200", "Windows Server (qualquer versão)", "Linux Ubuntu ou derivados", "Outro Linux/Versões antigas" }));
        estAntivirus.setModel(new DefaultComboBoxModel(new String[] { "Atualizado", "Desatualizado", "Desativado", "Não possui antivírus" }));
        estSistemaoperacional.setModel(new DefaultComboBoxModel(new String[] { "Atualizado", "Desatualizado", "Cópia ilegal" }));
        bipBios.setModel(new DefaultComboBoxModel(new String[] { "Normal - Um beep curto", "Mais de um", "Um beep longo", "Nenhum" }));
        dataSistema.setModel(new DefaultComboBoxModel(new String[] { "Atualizada", "Atrasada" }));
        hdBios.setModel(new DefaultComboBoxModel(new String[] { "Reconhecido", "Inexistente" }));
        gabLedfuncionamento.setModel(new DefaultComboBoxModel(new String[] { "Todos", "Nenhum", "Somente Power", "Somente HDD" }));
        estMonitor.setModel(new DefaultComboBoxModel(new String[] { "LED apagado (sem imagem)", "LED piscando (sem imagem)", "LED aceso (sem imagem)", "LED e imagem normais", "Desligando sozinho" }));
        gabBotaopower.setModel(new DefaultComboBoxModel(new String[] { "Normal", "Frouxo" }));
        gabCabeamentointerno.setModel(new DefaultComboBoxModel(new String[] { "Organizado", "Desorganizado" }));
        condCabeamentoenergia.setModel(new DefaultComboBoxModel(new String[] { "Bom", "Regular", "Ruim" }));
        psuVoltagem.setModel(new DefaultComboBoxModel(new String[] { "220v", "110v", "Bivolt" }));
        equipProtecaoenergia.setModel(new DefaultComboBoxModel(new String[] { "Estabilizador", "No-break", "Filtro de linha", "Nenhum" }));
        monRiscoscores.setModel(new DefaultComboBoxModel(new String[] { "Sempre", "Ocasionalmente", "Nunca" }));
        tipoVga.setModel(new DefaultComboBoxModel(new String[] { "Onboard", "Offboard" }));
        estDrivervideo.setModel(new DefaultComboBoxModel(driver ));
        pcReinicia.setModel(new DefaultComboBoxModel(new String[] { "No uso de programas pesados", "Em qualquer situação", "Não reinicia" }));
         
        pesos.setModel(new DefaultComboBoxModel(new String[] { "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1", "" }));
        pesosOb.setModel(new DefaultComboBoxModel(new String[] { "1.0", "0.9", "0.8", "0.7", "0.6", "0.5", "0.4", "0.3", "0.2", "0.1" }));
        
    }
    
    private void setTamanhoCol(JTable tabela, int col1, int col2, int col3) {
        
        tabela.getColumnModel().getColumn(0).setPreferredWidth(col1);
        tabela.getColumnModel().getColumn(1).setPreferredWidth(col2);
        tabela.getColumnModel().getColumn(2).setPreferredWidth(col3);
        
    }
    
    private void initTabelaAtributo() {
        
        jtAtributo = new JTable();
        jtAtributo.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });
    
        EachRowEditor rowEditor = new EachRowEditor(jtAtributo);
        DefaultTableModel dtm = (DefaultTableModel)jtAtributo.getModel();
        
        Object atributos[] = new Object[] {"Apresenta cores aleatórias e riscos na tela", 
                                         "Arquitetura do Sistema Operacional (Bits)",
                                         "Beeps emitidos pela BIOS",
                                         "Botão de ligar do gabinete",
                                         "Cabeamento interno do gabinete",
                                         "Condição do cabeamento de energia",
                                         "Data do sistema",
                                         "Disco rígido na Bios",
                                         "Endereço DNS",
                                         "Endereço IP",
                                         "Equipamento de proteção rede elétrica",
                                         "Espaço livre em disco (GBs)",
                                         "Estado da conexão de rede no S.O.",
                                         "Estado da impressora no S.O.",
                                         "Estado do conector RJ45",
                                         "Estado do Driver da impressora",
                                         "Estado do Driver da placa de rede",
                                         "Estado do Driver de som",
                                         "Estado do Driver de vídeo",
                                         "Estado do LED da impressora",
                                         "Estado do LED do HD",
                                         "Estado do Monitor",
                                         "Estado do periférico de som",
                                         "Estado do Sistema Operacional",
                                         "Estado do Software antivírus",
                                         "Estado Geral da Impressora",
                                         "Funcionamento dos LEDs no gabinete",
                                         "Infraestrutura de rede",
                                         "Mensagem de erro",
                                         "Nível do cartucho",
                                         "Peça nova recentemente instalada", 
                                         "Fila de impressão",
                                         "Quantidade de dispositivos de áudio",
                                         "Quantidade de memória RAM (GBs)",
                                         "Quantidade de núcleos do processador",
                                         "Sistema Operacional instalado",
                                         "Situação em que o computador reinicia inesperadamente",
                                         "Situação que o som não funciona",
                                         "Sujeira dentro do gabinete",
                                         "Temperatura da placa de vídeo",
                                         "Temperatura do processador",
                                         "Tipo de Conexão da Impressora",
                                         "Tipo de Conexão de Internet",
                                         "Tipo de Conexão de Rede",
                                         "Tipo de Impressora no S.O.",
                                         "Tipo de placa de vídeo",
                                         "Velocidade do processador (GHz)",
                                         "Voltagem da Fonte de Alimentação"};
        
        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");
        
        TableColumn coluna = jtAtributo.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesos));
        
        rowEditor.setEditorAt(0, new DefaultCellEditor(monRiscoscores));
        rowEditor.setEditorAt(1, new DefaultCellEditor(soArquitetura));
        rowEditor.setEditorAt(2, new DefaultCellEditor(bipBios));
        rowEditor.setEditorAt(3, new DefaultCellEditor(gabBotaopower));
        rowEditor.setEditorAt(4, new DefaultCellEditor(gabCabeamentointerno));
        rowEditor.setEditorAt(5, new DefaultCellEditor(condCabeamentoenergia));
        rowEditor.setEditorAt(6, new DefaultCellEditor(dataSistema));
        rowEditor.setEditorAt(7, new DefaultCellEditor(hdBios));
        rowEditor.setEditorAt(8, new DefaultCellEditor(endDns));
        rowEditor.setEditorAt(9, new DefaultCellEditor(endIp));
        rowEditor.setEditorAt(10, new DefaultCellEditor(equipProtecaoenergia));
        // 11 ESPAÇO LIVRE HD
        rowEditor.setEditorAt(12, new DefaultCellEditor(estConexaorede));
        rowEditor.setEditorAt(13, new DefaultCellEditor(estSoimpressora));
        rowEditor.setEditorAt(14, new DefaultCellEditor(estRjConector));
        rowEditor.setEditorAt(15, new DefaultCellEditor(estDriverimpressora));
        rowEditor.setEditorAt(16, new DefaultCellEditor(estDriverrede));
        rowEditor.setEditorAt(17, new DefaultCellEditor(estDriversom));
        rowEditor.setEditorAt(18, new DefaultCellEditor(estDrivervideo));
        rowEditor.setEditorAt(19, new DefaultCellEditor(estLedimpressora));
        rowEditor.setEditorAt(20, new DefaultCellEditor(estLedhd));
        rowEditor.setEditorAt(21, new DefaultCellEditor(estMonitor));
        rowEditor.setEditorAt(22, new DefaultCellEditor(estDispositivoaudio));
        rowEditor.setEditorAt(23, new DefaultCellEditor(estSistemaoperacional));
        rowEditor.setEditorAt(24, new DefaultCellEditor(estAntivirus));
        rowEditor.setEditorAt(25, new DefaultCellEditor(estGeralimpressora));
        rowEditor.setEditorAt(26, new DefaultCellEditor(gabLedfuncionamento));
        rowEditor.setEditorAt(27, new DefaultCellEditor(infraRede));
        rowEditor.setEditorAt(28, new DefaultCellEditor(msgErro));
        rowEditor.setEditorAt(29, new DefaultCellEditor(nivelCartuchoimpressora));
        rowEditor.setEditorAt(30, new DefaultCellEditor(hwNovoinstalado));
        rowEditor.setEditorAt(31, new DefaultCellEditor(filaImpressao));
        rowEditor.setEditorAt(32, new DefaultCellEditor(qtdDispositivoaudio));
        //33 QUANTIDADE DE RAM
        //34 QUANTIDADE CORES CPU
        rowEditor.setEditorAt(35, new DefaultCellEditor(soInstalado));
        rowEditor.setEditorAt(36, new DefaultCellEditor(pcReinicia));
        rowEditor.setEditorAt(37, new DefaultCellEditor(sitSomnaofunciona));
        rowEditor.setEditorAt(38, new DefaultCellEditor(gabSujeira));
        //39 TEMP VGA
        //40 TEMP CPU
        rowEditor.setEditorAt(41, new DefaultCellEditor(tipoConexaoimpressora));
        rowEditor.setEditorAt(42, new DefaultCellEditor(tipoConexaointernet));
        rowEditor.setEditorAt(43, new DefaultCellEditor(tipoConexaorede));
        rowEditor.setEditorAt(44, new DefaultCellEditor(tipoSoimpressora));
        rowEditor.setEditorAt(45, new DefaultCellEditor(tipoVga));
        //46 CPU HZ
        rowEditor.setEditorAt(47, new DefaultCellEditor(psuVoltagem));
        
        jtAtributo.getColumn("Valor").setCellEditor(rowEditor);
        
        setTamanhoCol(jtAtributo, 360, 360, 20);
               
        spTabela.setViewportView(jtAtributo);

    }
    
    private void initTabelaSom() {
        
        jtSom = new JTable();
        jtSom.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });
        
        EachRowEditor rowEditor = new EachRowEditor(jtSom);
        DefaultTableModel dtm = (DefaultTableModel)jtSom.getModel();
        
        Object atributos[] = new Object[] { "Estado do Driver de som",
                                            "Estado do periférico de som",
                                            "Quantidade de dispositivos de áudio",   
                                            "Situação que o som não funciona" };
        
        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");
        
        TableColumn coluna = jtSom.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesosOb));
        
        rowEditor.setEditorAt(0, new DefaultCellEditor(estDriversom));
        rowEditor.setEditorAt(1, new DefaultCellEditor(estDispositivoaudio));
        rowEditor.setEditorAt(2, new DefaultCellEditor(qtdDispositivoaudio));
        rowEditor.setEditorAt(3, new DefaultCellEditor(sitSomnaofunciona));
        
        jtSom.getColumn("Valor").setCellEditor(rowEditor);
        
        setTamanhoCol(jtSom, 360, 360, 20);
        
    }
    
    private void initTabelaVideo() {
        
        jtVideo = new JTable();
        jtVideo.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });
        
        EachRowEditor rowEditor = new EachRowEditor(jtVideo);
        DefaultTableModel dtm = (DefaultTableModel)jtVideo.getModel();
        
        Object atributos[] = new Object[] {"Apresenta cores aleatórias e riscos na tela", 
                                           "Estado do Driver de vídeo",
                                           "Estado do Monitor",
                                           "Sujeira dentro do gabinete",
                                           "Temperatura da placa de vídeo",
                                           "Tipo de placa de vídeo"};

        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");
        
        TableColumn coluna = jtVideo.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesosOb));
        
        rowEditor.setEditorAt(0, new DefaultCellEditor(monRiscoscores));
        rowEditor.setEditorAt(1, new DefaultCellEditor(estDrivervideo));
        rowEditor.setEditorAt(2, new DefaultCellEditor(estMonitor));
        rowEditor.setEditorAt(3, new DefaultCellEditor(gabSujeira));
        // 4 temp vga
        rowEditor.setEditorAt(5, new DefaultCellEditor(tipoVga));
        
        jtVideo.getColumn("Valor").setCellEditor(rowEditor);
        
        setTamanhoCol(jtVideo, 360, 360, 20);

    }
    
    private void initTabelaRede() {
        
        jtRede = new JTable();
        jtRede.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });
        
        EachRowEditor rowEditor = new EachRowEditor(jtRede);
        DefaultTableModel dtm = (DefaultTableModel)jtRede.getModel();
        
        Object atributos[] = new Object[] {"Endereço DNS",
                                           "Endereço IP",
                                           "Estado da conexão de rede no S.O.",
                                           "Estado do conector RJ45",
                                           "Estado do Driver da placa de rede",
                                           "Infraestrutura de rede",
                                           "Tipo de Conexão de Internet",
                                           "Tipo de Conexão de Rede" };
        
        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");
        
        TableColumn coluna = jtRede.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesosOb));
        
        rowEditor.setEditorAt(0, new DefaultCellEditor(endDns));
        rowEditor.setEditorAt(1, new DefaultCellEditor(endIp));
        rowEditor.setEditorAt(2, new DefaultCellEditor(estConexaorede));
        rowEditor.setEditorAt(3, new DefaultCellEditor(estRjConector));
        rowEditor.setEditorAt(4, new DefaultCellEditor(estDriverrede));
        rowEditor.setEditorAt(5, new DefaultCellEditor(infraRede));
        rowEditor.setEditorAt(6, new DefaultCellEditor(tipoConexaointernet));
        rowEditor.setEditorAt(7, new DefaultCellEditor(tipoConexaorede));

        
        jtRede.getColumn("Valor").setCellEditor(rowEditor);
        
        setTamanhoCol(jtRede, 360, 360, 20);

    }
    
    private void initTabelaImpressao() {
        
        jtImpressao = new JTable();
        jtImpressao.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });
        
        EachRowEditor rowEditor = new EachRowEditor(jtImpressao);
        DefaultTableModel dtm = (DefaultTableModel)jtImpressao.getModel();
        
        Object atributos[] = new Object[] {"Estado da impressora no S.O.",
                                           "Estado do Driver da impressora",
                                           "Estado do LED da impressora",
                                           "Estado Geral da Impressora",
                                           "Nível do cartucho",
                                           "Fila de impressão",
                                           "Tipo de Conexão da Impressora",
                                           "Tipo de Impressora no S.O."};
        
        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");
        
        TableColumn coluna = jtImpressao.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesosOb));
        
        rowEditor.setEditorAt(0, new DefaultCellEditor(estSoimpressora));
        rowEditor.setEditorAt(1, new DefaultCellEditor(estDriverimpressora));
        rowEditor.setEditorAt(2, new DefaultCellEditor(estLedimpressora));
        rowEditor.setEditorAt(3, new DefaultCellEditor(estGeralimpressora));
        rowEditor.setEditorAt(4, new DefaultCellEditor(nivelCartuchoimpressora));
        rowEditor.setEditorAt(5, new DefaultCellEditor(filaImpressao));
        rowEditor.setEditorAt(6, new DefaultCellEditor(tipoConexaoimpressora));
        rowEditor.setEditorAt(7, new DefaultCellEditor(tipoSoimpressora));

        jtImpressao.getColumn("Valor").setCellEditor(rowEditor);
        
        setTamanhoCol(jtImpressao, 360, 360, 20);

    }
    
    private void initTabelaTrava() {

        jtTrava = new JTable();
        jtTrava.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });

        EachRowEditor rowEditor = new EachRowEditor(jtTrava);
        DefaultTableModel dtm = (DefaultTableModel)jtTrava.getModel();

        Object atributos[] = new Object[] {"Arquitetura do Sistema Operacional (Bits)",
                                           "Espaço livre em disco (GBs)",
                                           "Estado do LED do HD",
                                           "Estado do Sistema Operacional",
                                           "Estado do Software antivírus",
                                           "Mensagem de erro",
                                           "Peça nova recentemente instalada", 
                                           "Quantidade de memória RAM (GBs)",
                                           "Quantidade de núcleos do processador",
                                           "Sistema Operacional instalado",
                                           "Situação em que o computador reinicia inesperadamente",
                                           "Sujeira dentro do gabinete",
                                           "Temperatura do processador",
                                           "Velocidade do processador (GHz)"};

        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");

        TableColumn coluna = jtTrava.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesosOb));

        rowEditor.setEditorAt(0, new DefaultCellEditor(soArquitetura));
        rowEditor.setEditorAt(2, new DefaultCellEditor(estLedhd));
        rowEditor.setEditorAt(3, new DefaultCellEditor(estSistemaoperacional));
        rowEditor.setEditorAt(4, new DefaultCellEditor(estAntivirus));
        rowEditor.setEditorAt(5, new DefaultCellEditor(msgErro));
        rowEditor.setEditorAt(6, new DefaultCellEditor(hwNovoinstalado));
        rowEditor.setEditorAt(9, new DefaultCellEditor(soInstalado));
        rowEditor.setEditorAt(10, new DefaultCellEditor(pcReinicia));
        rowEditor.setEditorAt(11, new DefaultCellEditor(gabSujeira));

        jtTrava.getColumn("Valor").setCellEditor(rowEditor);

        setTamanhoCol(jtTrava, 360, 360, 20);

    }

    private void initTabelaInicialiazao() {

        jtinicializacao = new JTable();
        jtinicializacao.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });

        EachRowEditor rowEditor = new EachRowEditor(jtinicializacao);
        DefaultTableModel dtm = (DefaultTableModel)jtinicializacao.getModel();
        
        Object atributos[] = new Object[] {"Beeps emitidos pela BIOS",
                                           "Cabeamento interno do gabinete",
                                           "Data do sistema",
                                           "Disco rígido na Bios",
                                           "Funcionamento dos LEDs no gabinete",
                                           "Mensagem de erro",
                                           "Peça nova recentemente instalada", 
                                           "Sujeira dentro do gabinete"};

        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");

        TableColumn coluna = jtinicializacao.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesosOb));

        rowEditor.setEditorAt(0, new DefaultCellEditor(bipBios));
        rowEditor.setEditorAt(1, new DefaultCellEditor(gabCabeamentointerno));
        rowEditor.setEditorAt(2, new DefaultCellEditor(dataSistema));
        rowEditor.setEditorAt(3, new DefaultCellEditor(hdBios));
        rowEditor.setEditorAt(4, new DefaultCellEditor(gabLedfuncionamento));
        rowEditor.setEditorAt(5, new DefaultCellEditor(msgErro));
        rowEditor.setEditorAt(6, new DefaultCellEditor(hwNovoinstalado));
        rowEditor.setEditorAt(7, new DefaultCellEditor(gabSujeira));

        jtinicializacao.getColumn("Valor").setCellEditor(rowEditor);

        setTamanhoCol(jtinicializacao, 360, 360, 20);

    }
    
    private void initTabelaNaoliga() {

        jtNaoliga = new JTable();
        jtNaoliga.setModel(new DefaultTableModel(new Object[][]{}, new String[]{}) {
            boolean[] canEdit = new boolean[] {false, true, true};
            @Override public boolean isCellEditable(int rowIndex, int columnIndex){return canEdit [columnIndex];}
        });

        EachRowEditor rowEditor = new EachRowEditor(jtNaoliga);
        DefaultTableModel dtm = (DefaultTableModel)jtNaoliga.getModel();
        
         Object atributos[] = new Object[] { "Botão de ligar do gabinete",
                                             "Cabeamento interno do gabinete",
                                             "Condição do cabeamento de energia",
                                             "Equipamento de proteção rede elétrica",
                                             "Funcionamento dos LEDs no gabinete",
                                             "Peça nova recentemente instalada", 
                                             "Voltagem da Fonte de Alimentação"};

        dtm.addColumn("Atributo", atributos);
        dtm.addColumn("Valor");
        dtm.addColumn("Peso");

        TableColumn coluna = jtNaoliga.getColumnModel().getColumn(2);
        coluna.setCellEditor(new DefaultCellEditor(pesosOb));

        rowEditor.setEditorAt(0, new DefaultCellEditor(gabBotaopower));
        rowEditor.setEditorAt(1, new DefaultCellEditor(gabCabeamentointerno));
        rowEditor.setEditorAt(2, new DefaultCellEditor(condCabeamentoenergia));
        rowEditor.setEditorAt(3, new DefaultCellEditor(equipProtecaoenergia));
        rowEditor.setEditorAt(4, new DefaultCellEditor(gabLedfuncionamento));
        rowEditor.setEditorAt(5, new DefaultCellEditor(hwNovoinstalado));
        rowEditor.setEditorAt(6, new DefaultCellEditor(psuVoltagem));

        jtNaoliga.getColumn("Valor").setCellEditor(rowEditor);

        setTamanhoCol(jtNaoliga, 360, 360, 20);

    }
    
    private void selecaoAtri() {
        if (rbLivre.isSelected()) {
            spTabela.setViewportView(jtAtributo);
            cbCategoria.setEnabled(false);
        } else {
            cbCategoria.setEnabled(true);
            cbCategoria.setSelectedIndex(0);
            spTabela.setViewportView(jtVideo);
        }
    }
    
    public void cicloRBC() {
        
        int k = (Integer)jsK.getValue();
        ConfigCiclo confRbc = new ConfigCiclo(k);
        
        if (rbCategoria.isSelected()) {
            String categoria = (String)cbCategoria.getSelectedItem();
            if(categoria.equals("Som")) {
                confRbc.setTabela(jtSom);
                confRbc.similarityQuerySom();
            } else {
                if (categoria.equals("Imagem e Monitor")) {
                    confRbc.setTabela(jtVideo);
                    confRbc.similarityQueryVideo();
                } else {
                    if (categoria.equals("Rede e Internet")) {
                        confRbc.setTabela(jtRede);
                        confRbc.similarityQueryRede();
                    } else {
                        if (categoria.equals("Impressão")) {
                            confRbc.setTabela(jtImpressao);
                            confRbc.similarityQueryImpressao();
                        } else {
                            if (categoria.equals("Lentidão e travamentos")) {
                                confRbc.setTabela(jtTrava);
                                confRbc.similarityQueryTrava();
                            } else {
                                if (categoria.equals("Inicialização")) {
                                    confRbc.setTabela(jtinicializacao);
                                    confRbc.similarityQueryInicializacao();
                                } else {
                                    confRbc.setTabela(jtNaoliga);
                                    confRbc.similarityQueryNaoliga();
                                }
                            }
                        }
                    }
                }
            }
        } else {
            confRbc.setTabela(jtAtributo);
            confRbc.similarityQueryLivre();
        }
 
    }
    
    public void setSolucaoResultado(CBRCase _caso) {
        
        Resultado res = (Resultado)_caso.getResult();
        Solucao sol = (Solucao)_caso.getSolution();
        
        tfDiagnostico.setText(res.getDesResultado());
        tfCorretiva.setText(sol.getDesSolucao());
        
        btLimpar.setEnabled(false);
        btVerificar.setEnabled(false);
        cbCategoria.setEnabled(false);
        rbCategoria.setEnabled(false);
        rbLivre.setEnabled(false);
        jsK.setEnabled(false);
        spTabela.setEnabled(false);
        
        if(JFOco != null) JFOco.setCaso(_caso);
        
    }
    
}